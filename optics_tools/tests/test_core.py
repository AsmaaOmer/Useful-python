"""
Unit tests of optics_tools

From within the containing directory >> pytest

Tests are named test_{function name}
"""
import optics_tools as ot
from optics_tools import const as const

ALTITUDE = 700e3 # 700 km
APERTURE_DIAMETER = 0.1
BITS = 12
FOCAL_LENGTH = 1.0
FRAME_RATE = 30
GSD_CROSS = 1.0
PIXELS_ALONG = 512
PIXELS_CROSS = 640
PIXELS_TOTAL = PIXELS_ALONG * PIXELS_CROSS
PIXEL_DIM_CROSS = 20e-6
QUANTUM_EFFICIENCY = 0.75
READ_OUT_NOISE_ELECTRONS = 25
WAVELENGTH = 500e-9


def test_calc_camera_input_power():
    """Test calc input power at camera."""
    input_power = ot.calc_camera_input_power(altitude=ALTITUDE,
                                             aperture_diameter=APERTURE_DIAMETER,
                                             radiated_power_nadir=389.5)
    assert input_power == 6.243113972312371e-12

def test_calc_data_rate():
    """Test imager data rate, typically quoted in GB/s."""
    result = ot.calc_data_rate(bands_spectral=4,
                               bits=BITS,
                               cameras=3,
                               frame_rate=FRAME_RATE,
                               pixels_total=PIXELS_TOTAL)

    assert result/1e9 == 1.415577600 # units GB/sec.

def test_calc_earth_speed():
    """Test oribital speed at altitude."""
    assert ot.calc_earth_mean_orbital_speed(
        altitude=ALTITUDE)/1e3 == 7.504305710836449

def test_calc_earth_orbital_period():
    """Test orbital period."""
    assert (ot.calc_earth_orbital_period(altitude=ALTITUDE)/(60*60)
            == 1.6462035869223801)

def test_calc_electrons():
    """Test calc of the number of electrons generated by photons."""
    electrons = ot.calc_electrons_from_photons(photons=1e6,
                                               quantum_efficiency=QUANTUM_EFFICIENCY)
    assert electrons == 750000

def test_calc_energy_per_int():
    """Test calc of energy imparted in an integration time."""
    energy = ot.calc_energy_per_integration(sensor_incident_power=2.0,
                                            integration_time=0.5)
    assert energy == 1.0

def test_calc_f_number():
    """Test f number."""
    assert ot.calc_f_number(
        aperture_diameter=APERTURE_DIAMETER,
        focal_length=FOCAL_LENGTH) == 10.0

def test_calc_gsd_cross():
    """Test GSD cross track."""
    result = ot.calc_gsd_cross(altitude=ALTITUDE,
                               focal_length=FOCAL_LENGTH,
                               pixels_cross=PIXELS_CROSS,
                               sensor_dim_cross=25e-4)
    assert result == 2.734375

def test_calc_ifov():
    """Test IFOV calc."""
    assert ot.calc_ifov(pixel_dim_cross=PIXEL_DIM_CROSS,
                        focal_length=FOCAL_LENGTH) == 0.0011459155902616466

def test_calc_photons():
    """Test calc number of photons equivalent to an energy."""
    photons = ot.calc_photons_from_energy(energy=3e-14,
                                          wavelength=WAVELENGTH)
    assert photons == 75511

def test_calc_pixel_resolution():
    """Test calc pixel resolution"""
    assert ot.calc_pixel_resolution(ifov=0.00245,
                                    altitude=ALTITUDE) == 29.93239667170275

def test_calc_pixel_solid_angle():
    """Test calc pixel solid angle"""
    pix_solid_angle = ot.calc_pixel_solid_angle(gsd=GSD_CROSS,
                                                altitude=ALTITUDE)
    assert pix_solid_angle == 2.0408163265306126e-12

def test_calc_radiated_power_nadir():
    """Test calculation of radiated power with pixel resolution
    equal along and cross track."""
    assert ot.calc_radiated_power_nadir(integrated_upwelling_radiance=0.433,
                                        pixel_resolution_along=30,
                                        pixel_resolution_cross=30) == 389.7

def test_calc_sensor_incident_power():
    """Test calc input power on sensor."""
    incident_power = ot.calc_sensor_incident_power(camera_input_power=1.0,
                                                   optical_transmission_factor=0.75)
    assert incident_power == 0.75

def test_calc_swath_at_nadir_cross():
    """Test swath at Nadir."""
    assert ot.calc_swath_at_nadir_cross(
        gsd_cross=GSD_CROSS,
        pixels_cross=PIXELS_CROSS) == 640.0

def test_calc_total_noise_electrons():
    """Test calc total noise."""
    noise_e = ot.calc_total_noise_electrons(shott_noise_electrons=50,
                                            read_out_noise_electrons=25)
    assert noise_e == 55

def test_calc_shott_noise():
    """Test Shott noise calc."""
    assert ot.calc_shott_noise(particles=100) == 10

def test_calc_velocity_ground_track():
    """Test calc of ground track velocity."""
    period = ot.calc_earth_orbital_period(altitude=ALTITUDE)
    assert ot.calc_velocity_ground_track(
        earth_orbital_period=period) == 6762.155416606992

def test_conv_celcius_to_kelvin():
    """Test conversion of temperatures."""
    assert ot.conv_celcius_to_kelvin(celcius=0.0) == const.zero_celcius_in_kelvin

def test_conv_decibels():
    """Test conversion of decibels to power ratio."""
    assert ot.conv_decibels_to_power_ratio(decibels=70)/1e6 == 10.0

def test_conv_kelvin_to_celcius():
    """Test conversion of temperatures."""
    assert ot.conv_kelvin_to_celcius(kelvin=273.15) == 0.0
